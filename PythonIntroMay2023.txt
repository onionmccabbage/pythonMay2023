Python Introduction May 2023
============================

Toby Dussek 

9:30  start
11:00 coffee until 11:15
12:30 lunch
3:00  tea
4:30  end

Course Website: 
https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Programming_in_Python_May_23/site/index.html
Code Repo
https://github.com/onionmccabbage/pythonMay2023
 
Monday
> Welcome
> where to write code: immediate and module (just a file)
  Pycharm or VSCode or ...
> overview of Python 3 (and Python 2)
  python 2 print does not need brackets
  python 2 division is type-dependant, so int division ALWAYS gives an int. 2/5 is 2
  both 2 and 3 support multi-threading and multi-processing
- architecture, structure, and professional code best practice
> print() and input()
> maths operators and data types
> the if statement for conditional logic
- while loop, break and pass
> indentation
> immutable strings
> print formatting
. square bracket notation for iterable collections
- memory efficiency
- identifiers
> boolean True and False
> type and type conversion
> validate input before casting it
- string manipulation
- Lists, Tuples and nested collections
- after lunch review exercise
- dictionaries (non-numeric indexed iterable collections)
- import, pip, libraries and modules
- very big numeric values
- looping with 'for'
- range, generators

Tuesday
- quick review of where we got to
- the recordings...
- set comprehension, list compresension, dictionary comprehension
- by-reference or by-value
- other kinds of Python: cpython is the default - also jython ipython ironpython
- functions, *args, **kwargs  
- custom generator and yield
- to add libraries to python:
  - python -m ensurepip
  - python â€“m pip install requests (or any other library you need)
- requests
- overview of testing
- strings with triple quotes
- architecture: modules __init__.py and __name__ == '__main__'
- exception handling (try-except etc.)
- review exercise
- import path
- File input and output
- read and write binary files (bytes)

Wednesday
- brief review so far
- functions live in classes, which live in modules which live in packages
- PEP8 style guide
- global and local scope 
- data modelling structures: use built in structures until they do not suit the purpose (then use classes)
- Objects and Classes (OOP)
- get/set as property decorators @property
- name mangling (__)
    we should use getter/setter to prevent direct access, 
    but we can add arbitrary properies and methods to a class
- properties, methods, __str__
- intrinsic attributes: __doc__ etc.
- documentation strings (docstring) for classes
- special operators and overriding
- inheritance
- composition, static and class methods
- review exercise
- how to format with certain dp
- debug tools
- where to go from here:
  https://pynative.com/python-exercises-with-solutions/
  the next courses: advanced python then further advanced python
- end of course feedback




Links
- Python official site https://python.org
- PEP8 style guide https://www.python.org/dev/peps/pep-0008/
- online Python interpreter https://repl.it/languages/Python3



https://easyretro.io/publicboard/NTDqkkm6utgJFD9cdBrdb4sI6n72/25b24b80-280e-44c2-b02b-6694cfaa328f
https://apps.powerapps.com/play/17579985-153c-4727-b1f4-8b53e48b5e72?tenantId=92e84ceb-fbfd-47ab-be52-080c6b87953f&Type=ILT&ID=LD_ADHOC_MELA_1588&OID=508289&Title=Programming%20in%20Python&Owner=Sachin%20Srivastava%20B

